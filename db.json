{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/post-details.js","path":"js/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.all-contributorsrc","hash":"82bdd5689e6c7cf7bc9c8b40d6f856d554227053","modified":1571552657281},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1571552657281},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1571552657281},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1571552657281},{"_id":"themes/next/.gitignore","hash":"b80cec1d5e6a73d1cec382aad8046d1352a1e963","modified":1571552657281},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1571552657281},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1571552657281},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1571552657281},{"_id":"themes/next/README.md","hash":"e0fcd99c0a6db47fe5739df32d6ab39c44c65196","modified":1571552657281},{"_id":"themes/next/_config.yml","hash":"15684473becead162c0ed834611e98226c548f99","modified":1571552657281},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1571552657285},{"_id":"themes/next/gulpfile.coffee","hash":"25d1bf7f98ea03c647cb8caa19e109aaaacd6ad7","modified":1571552657285},{"_id":"themes/next/package.json","hash":"f784832fb4d85a3006fa7dbb9854b7fa652f16d5","modified":1571552657293},{"_id":"source/_posts/GitHub——更新已fork的项目代码.md","hash":"acdc7e595467514c8b5d12ca0eca6b621b3c904d","modified":1571552657269},{"_id":"source/_posts/build-openwrt-doc.md","hash":"46709b784a93ab4737c4c86f6f7910af738f77a8","modified":1571552657269},{"_id":"source/_posts/简单字符驱动程序示例.md","hash":"b351ff076bd73d9c78affbe8583ca7defb95009f","modified":1571552657269},{"_id":"source/categories/index.md","hash":"17bb9a627072138098f6dc144825915fc8f37a3e","modified":1571552657269},{"_id":"source/tags/index.md","hash":"a9b53121feeeda4c8043dac867557c13a5a060f8","modified":1571552657269},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"c149f003d03501565e7688915cd8f2e99fbf8f42","modified":1571552657281},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"d3e864f707c8bf2502579ef279d2c4e8cab8520a","modified":1571552657281},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1571552657281},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"88780daa3db837a34fe3ed90cc61cc578b5760ed","modified":1571552657281},{"_id":"themes/next/.github/auto_assign.yml","hash":"cb68a1dca1c4623448c2ca899614a9f21df1b036","modified":1571552657281},{"_id":"themes/next/.github/config.yml","hash":"8a5cbf5aa9529390fe0a782758aca9c3a02f9dcf","modified":1571552657281},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1571552657281},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"b09c85aa449f46bc025317ed196ec33a877f7c23","modified":1571552657281},{"_id":"themes/next/.github/lock.yml","hash":"585d2c471047be320aa62f2b74dad797bf09c530","modified":1571552657281},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1571552657281},{"_id":"themes/next/.github/release-drafter.yml","hash":"f8a0ee0ad08e1493475dbb67b2957cd6afcafac0","modified":1571552657281},{"_id":"themes/next/.github/stale.yml","hash":"41bf97ee86b8940a0b2e754499ec77fd2b44b717","modified":1571552657281},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1571552657281},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1571552657285},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"20f8a3d7db6e797a5a3ed8c84837315cb8e09e5b","modified":1571552657285},{"_id":"themes/next/docs/AUTHORS.md","hash":"b18787dbbcef7877fa414d19c03eb79ad51fa94f","modified":1571552657285},{"_id":"themes/next/docs/DATA-FILES.md","hash":"a85ae0f3a9655eea9acd3f6209b72eb002f2058d","modified":1571552657285},{"_id":"themes/next/docs/INSTALLATION.md","hash":"5385246ab4756e3e26ec9fe1f6a6759812177cc4","modified":1571552657285},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"1fb2c852fad03b73882069f1ec0659db2e1f2da0","modified":1571552657285},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1571552657285},{"_id":"themes/next/docs/MATH.md","hash":"aa90364b1ac069b4f8cfdb48b4879311856224e6","modified":1571552657285},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"a07ca23c38f6e4dddd4b74016b30e88cd3796f75","modified":1571552657285},{"_id":"themes/next/languages/de.yml","hash":"3d8920676d89494d7d1c74d4238680151ea6d9df","modified":1571552657285},{"_id":"themes/next/languages/default.yml","hash":"c13eda783f8717c62b7ad9e8a9b724314ae74e1a","modified":1571552657285},{"_id":"themes/next/languages/en.yml","hash":"c13eda783f8717c62b7ad9e8a9b724314ae74e1a","modified":1571552657285},{"_id":"themes/next/languages/es.yml","hash":"7dc1d7d5ea1078ee3b9bc8e0e8d0f15f52a7a4aa","modified":1571552657285},{"_id":"themes/next/languages/fa.yml","hash":"269b5cb70774485d7dbbcf98eec72c9e84e135b2","modified":1571552657285},{"_id":"themes/next/languages/fr.yml","hash":"dfdcfa536c40d06125dff373d042c50e08fcafd8","modified":1571552657285},{"_id":"themes/next/languages/hu.yml","hash":"e4a5f43fb45acd992def3de3b600aa4df4c95ed7","modified":1571552657285},{"_id":"themes/next/languages/id.yml","hash":"5665dece8435964a27b5061d7283f339f84721f0","modified":1571552657285},{"_id":"themes/next/languages/it.yml","hash":"311597c620059dbb99474f19b2110a4485ecf70b","modified":1571552657285},{"_id":"themes/next/languages/ja.yml","hash":"4f929842b3d6aaed709ea99da679d3910ee184e5","modified":1571552657285},{"_id":"themes/next/languages/ko.yml","hash":"5f5194dd0f5a3c8484e7668bce6fbe23340e531a","modified":1571552657285},{"_id":"themes/next/languages/nl.yml","hash":"561c77ca68e9d51a5ce8c89d3361fdb033c96bba","modified":1571552657285},{"_id":"themes/next/languages/pt-BR.yml","hash":"13b579911e44a8b213e1860f9a50c341be1bf95e","modified":1571552657285},{"_id":"themes/next/languages/pt.yml","hash":"af9d9b581dca45ab9789ca41d3492883a911e383","modified":1571552657285},{"_id":"themes/next/languages/ru.yml","hash":"b485c57dd7b447406dafd0dcfdfc9356266708c9","modified":1571552657285},{"_id":"themes/next/languages/tr.yml","hash":"39caf8a3677fd6dfbd523e73f8482a509e87b603","modified":1571552657285},{"_id":"themes/next/languages/uk.yml","hash":"4cbdbb0ed09487c9b435be21ac35f62182f53283","modified":1571552657285},{"_id":"themes/next/languages/vi.yml","hash":"3c6bb816ee7278afcddac06998c9ebe47ee19aef","modified":1571552657285},{"_id":"themes/next/languages/zh-CN.yml","hash":"e92e1e07a89c9fab27f445f9ec0fa35049fef38c","modified":1571552657285},{"_id":"themes/next/languages/zh-HK.yml","hash":"93d10d6e448c519004b09b11fba980b5036c93af","modified":1571552657285},{"_id":"themes/next/languages/zh-TW.yml","hash":"ae2aa1c6ec1a5a01a3a3bde17bcc3a82f9a35fa7","modified":1571552657289},{"_id":"themes/next/layout/_layout.swig","hash":"f92f610b1522261e48e907f4802a4bf75c12025c","modified":1571552657289},{"_id":"themes/next/layout/archive.swig","hash":"cb094b1ff5a45cc313b9ac3aac843380dabc6e6d","modified":1571552657293},{"_id":"themes/next/layout/category.swig","hash":"3f679b6086fd02badb83ab46e5eaf800616cafe9","modified":1571552657293},{"_id":"themes/next/layout/index.swig","hash":"8cf3451dd2d5727920b351a8f5eefdddb5bf3638","modified":1571552657293},{"_id":"themes/next/layout/page.swig","hash":"dc48085a0c69c60155d57aa546ded835a1ff767e","modified":1571552657293},{"_id":"themes/next/layout/post.swig","hash":"4291b34b17fc6f1c06eb69852c894913e889a774","modified":1571552657293},{"_id":"themes/next/layout/tag.swig","hash":"2270c5a88da13cac6e19913568a950962d556ea9","modified":1571552657293},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c37a60580c901c79ccb22564b228a46e06207445","modified":1571552657281},{"_id":"themes/next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"57e1e06e845193e80c7df4a4454af28352526f7a","modified":1571552657281},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"07c423cce4157b8e2dbf60907ccbf3f18c4cf98a","modified":1571552657281},{"_id":"themes/next/.github/ISSUE_TEMPLATE/non-english.md","hash":"0b0727ff4d5180ae67f930fb4f8e9488e33eda9f","modified":1571552657281},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"67d04e3e29a2675d1a9f87d1ae6ea0769e963ff1","modified":1571552657285},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1571552657285},{"_id":"themes/next/docs/ru/README.md","hash":"3ceab62de4db29e2257dd5a187c7f8731a207f84","modified":1571552657285},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1571552657285},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"5ad2c2d0a11443a03b3fd912925bc0dcfbcda88c","modified":1571552657285},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"0dfb458370a0ffbbe37c00f53c15e3aa3e79b125","modified":1571552657285},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"ca39e510b43ea1efe7e5feeca2243375e55eff5c","modified":1571552657285},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"c46f3f7496fc422207cc5954e10a2bc972b650aa","modified":1571552657285},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"c13546dd70a99a7d2d409cddf5d59f2f4d4d44a4","modified":1571552657285},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8ceaad956a1afedf179b2e0b98a67adee9afec08","modified":1571552657285},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"a658a72589738e11aefaa3a714b188ffd5aac822","modified":1571552657285},{"_id":"themes/next/docs/zh-CN/README.md","hash":"0981aaf68145a05b02cd10c95d38cbaf97622944","modified":1571552657285},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"4ee0607ddcfb2fe0e5868aced6d5814d1ada4405","modified":1571552657285},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"27fd94c1cc420afffbf705d45f22949fdb31c21a","modified":1571552657289},{"_id":"themes/next/layout/_macro/post.swig","hash":"24be6c04a23aa7fa0d26555f0a04ee9d58b9353c","modified":1571552657289},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"f135719ae50bcf823429d82725d8213387cee086","modified":1571552657289},{"_id":"themes/next/layout/_partials/comments.swig","hash":"e0f59221b6010bd3e05d34fac915556f51b8a458","modified":1571552657289},{"_id":"themes/next/layout/_partials/footer.swig","hash":"3d96929d510bbdbd60112b1d7561c247f994e859","modified":1571552657289},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"769a983fe2f77908bfc8590ff37a0d8958b47598","modified":1571552657289},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"4b0c972c44bfa7ab07604280563deb9cc3974657","modified":1571552657289},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"7fcb5a80b19c4fefa04aab1462723c130ddb90df","modified":1571552657289},{"_id":"themes/next/layout/_scripts/index.swig","hash":"fa8c63d056d9b65c0a8c7ba5a41b3451a65fe445","modified":1571552657289},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b050f6a43d8c47d642b6740a5e7c46a15ede797","modified":1571552657289},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"bae6ad94cd59fa85454c9411b02371b6c2e28b5b","modified":1571552657289},{"_id":"themes/next/layout/_scripts/three.swig","hash":"930535b03f7c0c6f31b788503201a0df29dc011e","modified":1571552657289},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"858fb9465e0d500f95c941413baba837cc1ca0b2","modified":1571552657289},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1571552657289},{"_id":"themes/next/layout/_third-party/facebook-sdk.swig","hash":"ae5a96ad90f314da50bb6057bdd3a4a0a3106827","modified":1571552657293},{"_id":"themes/next/layout/_third-party/index.swig","hash":"32e4fe8dd8b3c40a17314569d1a14bde55251074","modified":1571552657293},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"3a7824ba4ae7e5703fb196df45469f107387657e","modified":1571552657293},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"da6a9d14ed10203e378c6e2c00a7b5e7afabca58","modified":1571552657293},{"_id":"themes/next/layout/_third-party/vkontakte-api.swig","hash":"e0d012bdbae5545d90143030116114c34219bd37","modified":1571552657293},{"_id":"themes/next/scripts/events/core.js","hash":"a25690d8b03779f7e318108c8eace9baf6d4283a","modified":1571552657293},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"834599d2b83f06e90f8cf618cddc106fe900ba5c","modified":1571552657293},{"_id":"themes/next/scripts/filters/excerpt.js","hash":"827c3733fa14b018dd1f07e41686c207880e823a","modified":1571552657293},{"_id":"themes/next/scripts/filters/exturl.js","hash":"9c32675f64121ffbe454189b8e418b408f79d9c2","modified":1571552657293},{"_id":"themes/next/scripts/filters/lazyload.js","hash":"51672320fff6b39f56fe6a2881c611afe4e79b8e","modified":1571552657293},{"_id":"themes/next/scripts/filters/minify.js","hash":"c02901ce5f94811c9e1ff18fa5fb2216b67f432a","modified":1571552657293},{"_id":"themes/next/scripts/helpers/engine.js","hash":"896a581feb9432e58a325ad04d66d6310a12374e","modified":1571552657293},{"_id":"themes/next/scripts/helpers/font.js","hash":"53169e2d04f0c21e68beb07c212be0a6c2a9aaea","modified":1571552657293},{"_id":"themes/next/scripts/helpers/next-inject.js","hash":"33eb6f38de575b973fed237032c34d878594fdc1","modified":1571552657293},{"_id":"themes/next/scripts/helpers/next-js.js","hash":"b28a8ed6d033946acbb5b91f6d8b884857410dd9","modified":1571552657293},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"799a042bbf497a4c7a2981aa2014ff28fa1bb382","modified":1571552657293},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"d512f44195f68b0ff93f3c82afff9161cdf1b7d6","modified":1571552657293},{"_id":"themes/next/scripts/tags/button.js","hash":"1d1d25f7e579d92fa563778dd0f163e8eda190da","modified":1571552657293},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"20e392b8583ba6ae5037449c2c7e191d3927641b","modified":1571552657293},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1571552657293},{"_id":"themes/next/scripts/tags/full-image.js","hash":"70b1d6ed969143e3912daf051ccc3585d984c146","modified":1571552657293},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"8fc05f22b88553bc1d96e0c925799cd97920fc6a","modified":1571552657293},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"60f880c1e11a7df1aee4f2e01d65451fecc0372c","modified":1571552657293},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1571552657293},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1571552657293},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1571552657293},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1571552657293},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1571552657293},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1571552657293},{"_id":"themes/next/source/css/main.styl","hash":"68c3377b643162aeaae2b60c196486fdb3b509c3","modified":1571552657301},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1571552657301},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1571552657301},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1571552657301},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1571552657301},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1571552657301},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1571552657301},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1571552657301},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1571552657301},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1571552657301},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1571552657301},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1571552657301},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1571552657301},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1571552657301},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1571552657301},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1571552657301},{"_id":"themes/next/source/js/algolia-search.js","hash":"38659e52873097a46e73f3964f6789ebda06235b","modified":1571552657301},{"_id":"themes/next/source/js/bookmark.js","hash":"43ffca83f66521982deba1b3e7c218127ea5b245","modified":1571552657301},{"_id":"themes/next/source/js/local-search.js","hash":"047d0704f0e4c19ce76f08420b1931471ab24e9e","modified":1571552657301},{"_id":"themes/next/source/js/motion.js","hash":"cde432469b7587cb9dd4c73af6df9afabff2e830","modified":1571552657301},{"_id":"themes/next/source/js/next-boot.js","hash":"1e2ac5907a1aa2bd71d036b9b858e2e7634368ee","modified":1571552657301},{"_id":"themes/next/source/js/post-details.js","hash":"fafaa991f64ee5ecc446fa7952f78b695de8060b","modified":1571552657301},{"_id":"themes/next/source/js/utils.js","hash":"447a673153436df6869d05ee3f6268ea96da18ca","modified":1571552657301},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1571552657297},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1571552657297},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1571552657301},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"9e959646899a1dd381c0bea870408cd392c93c70","modified":1571552657289},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"1dc3875981923aee38b7b1e3ca3813b75ed6ab9c","modified":1571552657289},{"_id":"themes/next/layout/_partials/analytics/busuanzi-counter.swig","hash":"b35b2bf2ce3d73cabe8c443a45c2a82d45baf151","modified":1571552657289},{"_id":"themes/next/layout/_partials/analytics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1571552657289},{"_id":"themes/next/layout/_partials/analytics/firestore.swig","hash":"67e63c25d509f02a6057ee9724f1b6efd647f72f","modified":1571552657289},{"_id":"themes/next/layout/_partials/analytics/index.swig","hash":"ac6a3995c1330d2d73300b2427006509d0f8dba5","modified":1571552657289},{"_id":"themes/next/layout/_partials/analytics/lean-analytics.swig","hash":"ca94a27904c4aa61dda840fa1bbe0d4c6e0ae8f6","modified":1571552657289},{"_id":"themes/next/layout/_partials/analytics/tencent-analytics.swig","hash":"493a1ef6c8f475d4dd3156a6ab37690dc75695ea","modified":1571552657289},{"_id":"themes/next/layout/_partials/analytics/tencent-mta.swig","hash":"198813a3f382bda4278fe3759bf0f18a5769bb33","modified":1571552657289},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"6f02724e24945d7e5f0dcd351deebc90996ad38d","modified":1571552657289},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"f5b7e65fdcd15bdee48aeeec0551caadbf25fdd8","modified":1571552657289},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"8c11f83ab52890b0716dbf722fe899fd0b8c00fc","modified":1571552657289},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"3e768faf37730891754f9817a01c04d754022017","modified":1571552657289},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"1ba4cd71b826186b7f782bd06258f2ec52a2b491","modified":1571552657289},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"a72e33e11df9d3639cdebab4f480e397c70deacb","modified":1571552657289},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"883ea1d024a8262eb8d3213de71c8ccb30daf095","modified":1571552657289},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"d3c25d70f0fd76121e4cacb9f8af4ccbe2a3c74d","modified":1571552657289},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"3ed15de413b9ca83641bbd0b740f94b450630357","modified":1571552657289},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"b654d63d2ed221a8b642223e220392e5172d8f4d","modified":1571552657289},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"e2549106ea26ac48019aa3f8023b8fdc78c0f6db","modified":1571552657289},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"40483139657cde24356c6a4033a6386b909327a9","modified":1571552657289},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"2edfaf1579ea58e15cb5583fb7962dfee9af2257","modified":1571552657289},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"7fa01334a0ba84500e920bb9202baa08067d2ee1","modified":1571552657289},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"d6fa9e4432b87004c5678dfe2d4b2c1f4a702b93","modified":1571552657289},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"52a811b2fac3a7ca2abf7645d24c3b841622de1b","modified":1571552657289},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"820d713e55aa6e5c82f4a2dcaf188d0bd60c7893","modified":1571552657289},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"ed6856429dca33f68b76e3c5b9e28d2f775fbce5","modified":1571552657289},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"5258d3dbfbb6d585f798c697463f8b67b7dea02b","modified":1571552657289},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1571552657289},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"108b157fbd1ac3baaf19ae87234fa8728ab79556","modified":1571552657289},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1571552657289},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1571552657289},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"7fd0459d2f1cfe1254f2c2b8087dc094c8cb0e84","modified":1571552657289},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1571552657289},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"9f73476ebcf5cd3b7f55525b3f35dc7e9f01e154","modified":1571552657289},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"42aa3022f7739a552c7a55de316d8c0994b2fdc1","modified":1571552657289},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"20fcbed44aede1b908bd17d7a0279b03639068b1","modified":1571552657289},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"fdcf006e1ba2e53eab65e901b6c63159538307ef","modified":1571552657289},{"_id":"themes/next/layout/_third-party/chat/index.swig","hash":"5ab4a8b4306c837d2f8c211a9d7fdaed76fa254d","modified":1571552657289},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1571552657289},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"1130b8bd60f3b84397974486e6586d7f0afaf836","modified":1571552657289},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"86092b31761948486ecb379eb7445f66a158769d","modified":1571552657289},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"df8413cba22deffca94cf4edd6d9f8d35d2bb58f","modified":1571552657289},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"261c4f1ab42f692279a310943b807ed34516df7c","modified":1571552657289},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"6f95bc4d7ffaddc3c0df0ef3eeeaac58ff83f560","modified":1571552657289},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"feba64b1246acc88461b9126bd22e2d75ee10ec9","modified":1571552657293},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"bc23c9eb9c06b0b377695f44373c14c5cde1d0e3","modified":1571552657293},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"6a05a8847cbd915029a511e995d5ee1ce571292c","modified":1571552657293},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"dff6835d0b03ecc2db6919ca27cfb7b63949e6a8","modified":1571552657293},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"ad7a22ee0f183481c7843ecd881b9f9e8e037e31","modified":1571552657293},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"b2fd17688f0433571b37704bc8df798e175e7811","modified":1571552657293},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1571552657293},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1571552657293},{"_id":"themes/next/layout/_third-party/tags/index.swig","hash":"83d0a8f71878c6b96a04ba08567b9064de6cce83","modified":1571552657293},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"a54308f934c33b12f6bf28e4ce90e517f38cab57","modified":1571552657293},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"7597800b6ce2f545baea797d95d1b8c7cf624299","modified":1571552657293},{"_id":"themes/next/scripts/events/lib/config.js","hash":"867b23bb231224064a79df5278ba0a02215044eb","modified":1571552657293},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1571552657293},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"251dcc22ed213da9b6135e1b958010e3352408d4","modified":1571552657293},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"f4aafd279e43a53ce9a72b8f455efa008f3f5177","modified":1571552657293},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1571552657293},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"d6adb9f354207ac7f93916f7e310e466c3e38236","modified":1571552657293},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"379e3673263d62e1f92ede09df1275a0419e4b51","modified":1571552657293},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"a9ebe8e80edb5e19ec4b845090d260ae9de1566a","modified":1571552657293},{"_id":"themes/next/scripts/filters/comment/facebook-comments-plugin.js","hash":"f7a8a0fc86ed2656de4fc61444c4a45d0c8d47f0","modified":1571552657293},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"4505867a0598b83583f9740ecba3e4f053d18ebe","modified":1571552657293},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"71ee48847a1e54962640a4b64298ecc3e76565f8","modified":1571552657293},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"85502e9f2499f3ee02ff9d1afa368db578cdf14a","modified":1571552657293},{"_id":"themes/next/scripts/filters/comment/vkontakte.js","hash":"9d88be95296c7c16ee61c9b86691c94b9d91046e","modified":1571552657293},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2315dd8a7a2c7aabd29efa6193df08e805cb15fc","modified":1571552657297},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2bb4c78b5da482751085beb73ab01ecd2dcbccda","modified":1571552657301},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"59384f63e608b272e4c8679009bbe5e6594fd1b1","modified":1571552657301},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"d9a2eff154fafff547b3aca7321eee94b450c00a","modified":1571552657301},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"4c101c21b4f2712e47dba869ccc116b245fb0909","modified":1571552657301},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"db52bce619bb848189e83b7bfabd1b2a06fd5578","modified":1571552657301},{"_id":"themes/next/source/css/_variables/base.styl","hash":"52fedda7a66fd31975485873c8d884c7391391f3","modified":1571552657301},{"_id":"themes/next/source/js/schemes/muse.js","hash":"994e03a66a3ee3533bb85a712704d127e7b2799e","modified":1571552657301},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"4438abc724321ddc7f24500aedce4c02899726f3","modified":1571552657301},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1571552657305},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1571552657305},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1571552657305},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1571552657305},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1571552657305},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1571552657309},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1571552657309},{"_id":"themes/next/source/lib/jquery/index.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1571552657309},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"cda066b495a4b6b10c7bc88b2a9b82722156b66b","modified":1571552657293},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"e0db0d9205cd47c48edba81c7397e09ed24783fa","modified":1571552657293},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"738333c9c7e31dd4118784e215682cc633497390","modified":1571552657293},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"3faa8a7cdb05ef3f3b02920d381773dfd54270a5","modified":1571552657293},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"6c61a120d61dec145c8db3a244cae0e724f6f3ef","modified":1571552657293},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"390993b47942a47d23ed8904c92e0186b6e9af29","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"8e9deaf1e0a27d5bf5f0401bf04f5637df12b6c4","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"0dd11537a4b9a4d2faf3ad5cdae0f0f770a99ccf","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"202ee1f1f8e64d8292df16f40ee176ff4e5d7e71","modified":1571552657297},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"b6b9dc8a350e51ad7b8bb08141a61fc2fd7466fc","modified":1571552657297},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"442f7598991b92ec8bc3ce5343e18730da92e4fb","modified":1571552657297},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"40357d6248504315d73df1d9ef1e430e2a900cf2","modified":1571552657297},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"4c4986b704c3cc3167c3c2a69c454446cf152528","modified":1571552657297},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"4f7140cc0db08b47a25c4c7aad71047d433051a1","modified":1571552657297},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"19a20393d266b21ee44ff07d6fa1e9ebbc39a5d9","modified":1571552657297},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"96abee45b2438f750ba686b0a37e67dd76ab1eae","modified":1571552657297},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"65328fbc073901d78729463e46cb28a4c37a6fac","modified":1571552657301},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"71d75fa309cf5b96d876da536f57c047e57afcff","modified":1571552657301},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"87d19a45db10689aae9a09736efd1eb896a35b3d","modified":1571552657301},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"3462ffd270f3e218e0a8362262466e79d731f975","modified":1571552657301},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"a87716a5de8c4cf038618f69b0422f4c69ff2049","modified":1571552657301},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"d46c61153bdba976ea785431d5d4b2c2a47c39b2","modified":1571552657301},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"895256b0c4272efbdd0e95d4250a036b83f7e7cf","modified":1571552657301},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"54c5e23ec3dcbbc77848ededba76e861cf0f4719","modified":1571552657301},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"bdc0ada1eec3c1d625bfe2c148cdfc1b3460fa32","modified":1571552657301},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"0138165021be463f19e092f8972ac41aea3fb68a","modified":1571552657301},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"fe2b29e4f923d5f2f263ec517884b3588ab5bd15","modified":1571552657301},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"41b1d10a530913908e026fd991216e234766d148","modified":1571552657301},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"2fa573d7c04b8fa4717fc50265d7e4273f4325ea","modified":1571552657301},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"b49f34b82850b883576c5945247274ad4691ca7f","modified":1571552657301},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"1dff07a9908b0a9c02ee68693abb614533368c18","modified":1571552657301},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e91703b493ea10bf95b64ce6b8041c766f45d6ec","modified":1571552657301},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"8f4e8e00e07bf1f560e0adaf383ba51831e6c749","modified":1571552657301},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"10b4794ba62726fc052c74d786d962ed79d0780b","modified":1571552657301},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1571552657305},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1571552657305},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1571552657305},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1571552657305},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"0442cccb1111eec0d38357fba810319d781b7ef9","modified":1571552657293},{"_id":"themes/next/source/css/_common/components/header/bookmark.styl","hash":"835f1194d1743c24a604f2e1ed7d0a65c87d11ea","modified":1571552657293},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"51b1d9dc0627ac641e181061a3ca6f68b6168bca","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"1bfa07d40ceb03b0b69a5752478ca555723f7a15","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"139c17e7d4aa3e1112340a26a270efe58c279f8e","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"dada73ae88f01fab2ab4d2c83eddfc558de2110a","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"080f22922d89ca714a2463d6eaedfd4cb68e8aef","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/highlight/copy-code.styl","hash":"06b3120745212db4bb5ecba7b086a15e1e75267f","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4fa5557bbdd17a644d81e0575a31f66fae165186","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"a67dc85f6d158dac20e951ab55988ff7e9e1739b","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"1f217159862b12a89350e11b5097a8f3031af28f","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"cf89bbb7024a67503c6a5a54e49b4eb45389a3f7","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"61ca40856e5cacd48e0fa9728fde4605c7dd4c94","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"934669b8b9001bc2d5b25a40cd970db187cde89f","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"ac2105c5a7f581b1c0f2b59f2c0c3e87a7c28383","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"f96b241dea210e494b9173be76cce65faee7157a","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"bb892e5934a3b525afd1e578db991b747ea4c1eb","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"8b0dde1df553a5a2f5e0765e4e4ce48e9ab2c90e","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"c60afb603d58cad3ad13e1a16c66832538510063","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2e2a09dddd2a394a635bcefb6207b6cddcb784c7","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"2ce83f40e37dd7bae44ae837628c83e7f0d1e43b","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"70d13702896e03013f694f89d5a68adbf0fff4af","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"5da763d541540586ccd13868a36e3da55549eb22","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"8b6481a0ac60007cf3defa3c9d85a6e412c91d6e","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"aa5ca1be24d0f895110263bb8cc72b1a7b2d5469","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2ef546b4cfa5038ebb050c592c5135bbeb51af41","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"9b3ff4aa24069eab0e9771437013f45e450d4217","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"95339b71ac90553fb1634c536c9749055e0c788a","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"26226247288e1b2e8eca7af9caa7086b28578a42","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"d055f8420583c7a009818dcdfaada592308bd628","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"f3108a247549fbdf11071d023add3f1b34ad2b23","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"cf48aeb1373cd6141f5d6c97bea68026435f58a9","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"84dc588ddcf342ae49210d64f4bacc89326b386f","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"f27895cdb99f3365521dbd880e255a5a59485581","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"02e5a998748a67fa885fb06fae242bcf3f2786fb","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"0527bc64708a9446dc7bbb2c7e39ab3a61251c26","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"5d63f7479ee0f645e7538c60e827036fad74766d","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"78d309e22206a4addda3c393282518dae02250ed","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"278c31ed96474cd8a2ba465ed4131327e9d598bd","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"2dc2a5b7becb11de1d4bdab6b5195588ae878cfc","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"dd3f402a8e837197803d14c5a79902035b214938","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"85b8606763f4177d2f9a11c1909a21ab1ae2011c","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"4b1e1cb67eaa8da3664a617e9913f3d4ccffe3db","modified":1571552657297},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"4525465f40f82bd66e5f34e986440c75a9e2d2b2","modified":1571552657297},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1571552657305},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1571552657305},{"_id":"public/categories/index.html","hash":"cb88bbdd7ee4ccfd35da2329acb61ae3422f9dfc","modified":1571552842208},{"_id":"public/tags/index.html","hash":"658e5d2f9cfd2ad2868bfb3fd9b044ecb903b9a7","modified":1571552842208},{"_id":"public/archives/index.html","hash":"748c87bb60139bac7d5ba5154a15f077f5b5ce12","modified":1571552842208},{"_id":"public/archives/2019/index.html","hash":"acc325f8fa2ad146900be0b5ac0ce64f48f2d723","modified":1571552842208},{"_id":"public/archives/2019/08/index.html","hash":"69c9a2eb545a8b778a78ab1c69ef4d2b635ebbce","modified":1571552842208},{"_id":"public/archives/2019/09/index.html","hash":"976eadae9a65a3e3e6e19918304bd5cb2df82546","modified":1571552842208},{"_id":"public/categories/hexo教程/index.html","hash":"04bc39d2ae1442fc95d7879a5c4053c9c7e5b7af","modified":1571552842208},{"_id":"public/categories/驱动开发/index.html","hash":"ce0c288495ac4b6fb2243f22e90fb5d408c41546","modified":1571552842208},{"_id":"public/tags/Hexo/index.html","hash":"7c0cc0adb906da754b7c08deb58255d4593da609","modified":1571552842209},{"_id":"public/tags/Openwrt/index.html","hash":"165fac5ad021687446ed5506e7b26e36c60d5a69","modified":1571552842209},{"_id":"public/2019/09/03/build-openwrt-doc/index.html","hash":"ce9a4138fae0e54eff6a422bd47e170fa8ec4cea","modified":1571552842209},{"_id":"public/2019/08/28/简单字符驱动程序示例/index.html","hash":"196c4af37b7fc0ae09bdcd574246b50a45ae4d2c","modified":1571552842209},{"_id":"public/2019/08/24/GitHub——更新已fork的项目代码/index.html","hash":"1fbdd8e159162317a47160aa1ae515f3c1005814","modified":1571552842209},{"_id":"public/index.html","hash":"7f25d65c0fd196af8d67803d3b7cbeb68a439f3e","modified":1571552842209},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1571552842214},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1571552842214},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1571552842214},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1571552842214},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1571552842214},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1571552842214},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1571552842214},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1571552842215},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1571552842215},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1571552842215},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1571552842215},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1571552842215},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1571552842215},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1571552842215},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1571552842215},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1571552842215},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1571552842215},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1571552842905},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1571552842907},{"_id":"public/js/algolia-search.js","hash":"38659e52873097a46e73f3964f6789ebda06235b","modified":1571552842910},{"_id":"public/js/bookmark.js","hash":"43ffca83f66521982deba1b3e7c218127ea5b245","modified":1571552842910},{"_id":"public/js/local-search.js","hash":"047d0704f0e4c19ce76f08420b1931471ab24e9e","modified":1571552842910},{"_id":"public/js/motion.js","hash":"cde432469b7587cb9dd4c73af6df9afabff2e830","modified":1571552842910},{"_id":"public/js/next-boot.js","hash":"1e2ac5907a1aa2bd71d036b9b858e2e7634368ee","modified":1571552842910},{"_id":"public/js/post-details.js","hash":"fafaa991f64ee5ecc446fa7952f78b695de8060b","modified":1571552842910},{"_id":"public/js/utils.js","hash":"447a673153436df6869d05ee3f6268ea96da18ca","modified":1571552842910},{"_id":"public/js/schemes/muse.js","hash":"994e03a66a3ee3533bb85a712704d127e7b2799e","modified":1571552842910},{"_id":"public/js/schemes/pisces.js","hash":"4438abc724321ddc7f24500aedce4c02899726f3","modified":1571552842910},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1571552842910},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1571552842911},{"_id":"public/css/main.css","hash":"df03e127dc04bb9d2dba948f86bcaa0849c2d164","modified":1571552842911},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1571552842911},{"_id":"public/lib/jquery/index.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1571552842911},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1571552842911},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1571552842911},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1571552842914}],"Category":[{"name":"hexo教程","_id":"ck1ylzghc0004umiebzt6dmym"},{"name":"驱动开发","_id":"ck1ylzghi0007umie6x1u3zcz"}],"Data":[],"Page":[{"title":"categories","date":"2019-08-25T06:49:40.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-08-25 14:49:40\ntype: \"categories\"\n---\n","updated":"2019-10-20T06:24:17.269Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck1ylzgh50001umie0egf5gti","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"tags","date":"2019-08-25T06:49:53.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-08-25 14:49:53\ntype: \"tags\"\n---\n","updated":"2019-10-20T06:24:17.269Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck1ylzgh90003umievvztrfuk","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"GitHub——更新已fork的项目代码","date":"2019-08-24T06:22:27.000Z","_content":"\ngithub上有个很方便的功能叫fork，将别人的工程一键复制到自己账号下。这个功能很方便，但有点不足的是，当源项目更新后，你fork的分支并不会一起更新，需要自己手动去更新。下面记录下网上找到的更新的方法\n\n1、在本地装好github客户端，或者git客户端\n\n2、clone 自己的fork分支到本地，可以直接使用github客户端，clone到本地，如果使用命令行，命令为：\n\n```\n   git clone git@github.com:break123/three.js.git three.js\n```\n\n3、增加源分支地址到你项目远程分支列表中(此处是关键)，先得将原来的仓库指定为upstream，命令为：\n\n```\n   git remote add upstream https://github.com/被fork的仓库.git\n```\n\n此处可使用git remote -v查看远程分支列表\n\n4、fetch源分支的新版本到本地\n\n```\n   [master]> git fetch upstream\n```\n\n5、合并两个版本的代码\n\n```\n   [master]> git merge upstream/master\n```\n\n6、将合并后的代码push到github上去\n\n```\n   [master]> git push origin master\n官方解决办法：\ngit fetch upstream\n# Fetches any new changes from the original repository\ngit merge upstream/master\n# Merges any changes fetched into your working files\n\nPS：\n其实 fork 本身就是个 copy, 所以删除重新fork，还是保持master干净，随时pull上游的更新都是可以的。\n用git的话，自己的修改最好是新开一个branch，这样就不影响fork的哪个branch继续从原始地方pull\n```\n\n","source":"_posts/GitHub——更新已fork的项目代码.md","raw":"---\ntitle: GitHub——更新已fork的项目代码\ndate: 2019-08-24 14:22:27\ncategories: \n- hexo教程\ntags:\n- Hexo\n---\n\ngithub上有个很方便的功能叫fork，将别人的工程一键复制到自己账号下。这个功能很方便，但有点不足的是，当源项目更新后，你fork的分支并不会一起更新，需要自己手动去更新。下面记录下网上找到的更新的方法\n\n1、在本地装好github客户端，或者git客户端\n\n2、clone 自己的fork分支到本地，可以直接使用github客户端，clone到本地，如果使用命令行，命令为：\n\n```\n   git clone git@github.com:break123/three.js.git three.js\n```\n\n3、增加源分支地址到你项目远程分支列表中(此处是关键)，先得将原来的仓库指定为upstream，命令为：\n\n```\n   git remote add upstream https://github.com/被fork的仓库.git\n```\n\n此处可使用git remote -v查看远程分支列表\n\n4、fetch源分支的新版本到本地\n\n```\n   [master]> git fetch upstream\n```\n\n5、合并两个版本的代码\n\n```\n   [master]> git merge upstream/master\n```\n\n6、将合并后的代码push到github上去\n\n```\n   [master]> git push origin master\n官方解决办法：\ngit fetch upstream\n# Fetches any new changes from the original repository\ngit merge upstream/master\n# Merges any changes fetched into your working files\n\nPS：\n其实 fork 本身就是个 copy, 所以删除重新fork，还是保持master干净，随时pull上游的更新都是可以的。\n用git的话，自己的修改最好是新开一个branch，这样就不影响fork的哪个branch继续从原始地方pull\n```\n\n","slug":"GitHub——更新已fork的项目代码","published":1,"updated":"2019-10-20T06:24:17.269Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1ylzggy0000umie8gf1plen","content":"<p>github上有个很方便的功能叫fork，将别人的工程一键复制到自己账号下。这个功能很方便，但有点不足的是，当源项目更新后，你fork的分支并不会一起更新，需要自己手动去更新。下面记录下网上找到的更新的方法</p><p>1、在本地装好github客户端，或者git客户端</p><p>2、clone 自己的fork分支到本地，可以直接使用github客户端，clone到本地，如果使用命令行，命令为：</p><a id=\"more\"></a>\n\n\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github<span class=\"selector-class\">.com</span>:break123/three<span class=\"selector-class\">.js</span><span class=\"selector-class\">.git</span> three.js</span><br></pre></td></tr></table></figure>\n\n<p>3、增加源分支地址到你项目远程分支列表中(此处是关键)，先得将原来的仓库指定为upstream，命令为：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote <span class=\"built_in\">add</span> upstream http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/被fork的仓库.git</span><br></pre></td></tr></table></figure>\n\n<p>此处可使用git remote -v查看远程分支列表</p>\n<p>4、fetch源分支的新版本到本地</p>\n<figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">[master]</span>&gt; git fetch upstream</span><br></pre></td></tr></table></figure>\n\n<p>5、合并两个版本的代码</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"literal\">master</span>]&gt; git merge upstream/<span class=\"literal\">master</span></span><br></pre></td></tr></table></figure>\n\n<p>6、将合并后的代码push到github上去</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   [<span class=\"literal\">master</span>]&gt; git push origin <span class=\"literal\">master</span></span><br><span class=\"line\">官方解决办法：</span><br><span class=\"line\">git fetch upstream</span><br><span class=\"line\"><span class=\"comment\"># Fetches any new changes from the original repository</span></span><br><span class=\"line\">git merge upstream/<span class=\"literal\">master</span></span><br><span class=\"line\"><span class=\"comment\"># Merges any changes fetched into your working files</span></span><br><span class=\"line\"></span><br><span class=\"line\">PS：</span><br><span class=\"line\">其实 fork 本身就是个 copy, 所以删除重新fork，还是保持<span class=\"literal\">master</span>干净，随时pull上游的更新都是可以的。</span><br><span class=\"line\">用git的话，自己的修改最好是新开一个branch，这样就不影响fork的哪个branch继续从原始地方pull</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"length":822,"excerpt":"<p>github上有个很方便的功能叫fork，将别人的工程一键复制到自己账号下。这个功能很方便，但有点不足的是，当源项目更新后，你fork的分支并不会一起更新，需要自己手动去更新。下面记录下网上找到的更新的方法</p><p>1、在本地装好github客户端，或者git客户端</p><p>2、clone 自己的fork分支到本地，可以直接使用github客户端，clone到本地，如果使用命令行，命令为：</p>","more":"\n\n\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github<span class=\"selector-class\">.com</span>:break123/three<span class=\"selector-class\">.js</span><span class=\"selector-class\">.git</span> three.js</span><br></pre></td></tr></table></figure>\n\n<p>3、增加源分支地址到你项目远程分支列表中(此处是关键)，先得将原来的仓库指定为upstream，命令为：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote <span class=\"built_in\">add</span> upstream http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/被fork的仓库.git</span><br></pre></td></tr></table></figure>\n\n<p>此处可使用git remote -v查看远程分支列表</p>\n<p>4、fetch源分支的新版本到本地</p>\n<figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">[master]</span>&gt; git fetch upstream</span><br></pre></td></tr></table></figure>\n\n<p>5、合并两个版本的代码</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"literal\">master</span>]&gt; git merge upstream/<span class=\"literal\">master</span></span><br></pre></td></tr></table></figure>\n\n<p>6、将合并后的代码push到github上去</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   [<span class=\"literal\">master</span>]&gt; git push origin <span class=\"literal\">master</span></span><br><span class=\"line\">官方解决办法：</span><br><span class=\"line\">git fetch upstream</span><br><span class=\"line\"><span class=\"comment\"># Fetches any new changes from the original repository</span></span><br><span class=\"line\">git merge upstream/<span class=\"literal\">master</span></span><br><span class=\"line\"><span class=\"comment\"># Merges any changes fetched into your working files</span></span><br><span class=\"line\"></span><br><span class=\"line\">PS：</span><br><span class=\"line\">其实 fork 本身就是个 copy, 所以删除重新fork，还是保持<span class=\"literal\">master</span>干净，随时pull上游的更新都是可以的。</span><br><span class=\"line\">用git的话，自己的修改最好是新开一个branch，这样就不影响fork的哪个branch继续从原始地方pull</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Openwrt编译指导文档","date":"2019-09-03T14:19:00.000Z","_content":"\n#### 1. 官方指导文档\n\nhttps://openwrt.org/zh-cn/doc/howto/build\n\n#### 2. 查看板卡支持情况\n\nhttps://openwrt.org/toh/start\n\n​\t之前openwrt是不支持树莓派3B+版本编译的，所以，对应的支持版本需要通过官方查询。通过查找到的结果，也可以点击查看详细的板卡信息及CPU信息。\n\nhttps://openwrt.org/toh/hwdata/raspberry_pi_foundation/raspberry_pi_3_bplus\n\n#### 3. 编译\n\n编译过程非常消耗时间，时间主要消耗在下载各种源码包。\n\n这里提供几个可以手动下载到源码包的网址\n\n1.  http://sources.openwrt.org/   这个网址上比较齐全，基本都能找到对应的源码包。\n2. http://openwrt.bjbook.net/download/\n3. https://gitee.com/ziguayungui/Openwrt_18.06_dl 我将自己用到的源码包上传到了码云上面，国内下载的速度比github快很多。","source":"_posts/build-openwrt-doc.md","raw":"---\ntitle: Openwrt编译指导文档\ndate: 2019-09-03 22:19:00\ncategories: \n- 驱动开发\ntags:\n- Openwrt\n---\n\n#### 1. 官方指导文档\n\nhttps://openwrt.org/zh-cn/doc/howto/build\n\n#### 2. 查看板卡支持情况\n\nhttps://openwrt.org/toh/start\n\n​\t之前openwrt是不支持树莓派3B+版本编译的，所以，对应的支持版本需要通过官方查询。通过查找到的结果，也可以点击查看详细的板卡信息及CPU信息。\n\nhttps://openwrt.org/toh/hwdata/raspberry_pi_foundation/raspberry_pi_3_bplus\n\n#### 3. 编译\n\n编译过程非常消耗时间，时间主要消耗在下载各种源码包。\n\n这里提供几个可以手动下载到源码包的网址\n\n1.  http://sources.openwrt.org/   这个网址上比较齐全，基本都能找到对应的源码包。\n2. http://openwrt.bjbook.net/download/\n3. https://gitee.com/ziguayungui/Openwrt_18.06_dl 我将自己用到的源码包上传到了码云上面，国内下载的速度比github快很多。","slug":"build-openwrt-doc","published":1,"updated":"2019-10-20T06:24:17.269Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1ylzgh70002umie2skbrv6g","content":"<h4 id=\"1-官方指导文档\"><a href=\"#1-官方指导文档\" class=\"headerlink\" title=\"1. 官方指导文档\"></a>1. 官方指导文档</h4><p><a href=\"https://openwrt.org/zh-cn/doc/howto/build\" target=\"_blank\" rel=\"noopener\">https://openwrt.org/zh-cn/doc/howto/build</a></p><h4 id=\"2-查看板卡支持情况\"><a href=\"#2-查看板卡支持情况\" class=\"headerlink\" title=\"2. 查看板卡支持情况\"></a>2. 查看板卡支持情况</h4><p><a href=\"https://openwrt.org/toh/start\" target=\"_blank\" rel=\"noopener\">https://openwrt.org/toh/start</a></p><p>​    之前openwrt是不支持树莓派3B+版本编译的，所以，对应的支持版本需要通过官方查询。通过查找到的结果，也可以点击查看详细的板卡信息及CPU信息。</p><a id=\"more\"></a>\n\n\n<p><a href=\"https://openwrt.org/toh/hwdata/raspberry_pi_foundation/raspberry_pi_3_bplus\" target=\"_blank\" rel=\"noopener\">https://openwrt.org/toh/hwdata/raspberry_pi_foundation/raspberry_pi_3_bplus</a></p>\n<h4 id=\"3-编译\"><a href=\"#3-编译\" class=\"headerlink\" title=\"3. 编译\"></a>3. 编译</h4><p>编译过程非常消耗时间，时间主要消耗在下载各种源码包。</p>\n<p>这里提供几个可以手动下载到源码包的网址</p>\n<ol>\n<li><a href=\"http://sources.openwrt.org/\" target=\"_blank\" rel=\"noopener\">http://sources.openwrt.org/</a>   这个网址上比较齐全，基本都能找到对应的源码包。</li>\n<li><a href=\"http://openwrt.bjbook.net/download/\" target=\"_blank\" rel=\"noopener\">http://openwrt.bjbook.net/download/</a></li>\n<li><a href=\"https://gitee.com/ziguayungui/Openwrt_18.06_dl\" target=\"_blank\" rel=\"noopener\">https://gitee.com/ziguayungui/Openwrt_18.06_dl</a> 我将自己用到的源码包上传到了码云上面，国内下载的速度比github快很多。</li>\n</ol>\n","site":{"data":{}},"length":466,"excerpt":"<h4 id=\"1-官方指导文档\"><a href=\"#1-官方指导文档\" class=\"headerlink\" title=\"1. 官方指导文档\"></a>1. 官方指导文档</h4><p><a href=\"https://openwrt.org/zh-cn/doc/howto/build\" target=\"_blank\" rel=\"noopener\">https://openwrt.org/zh-cn/doc/howto/build</a></p><h4 id=\"2-查看板卡支持情况\"><a href=\"#2-查看板卡支持情况\" class=\"headerlink\" title=\"2. 查看板卡支持情况\"></a>2. 查看板卡支持情况</h4><p><a href=\"https://openwrt.org/toh/start\" target=\"_blank\" rel=\"noopener\">https://openwrt.org/toh/start</a></p><p>​    之前openwrt是不支持树莓派3B+版本编译的，所以，对应的支持版本需要通过官方查询。通过查找到的结果，也可以点击查看详细的板卡信息及CPU信息。</p>","more":"\n\n\n<p><a href=\"https://openwrt.org/toh/hwdata/raspberry_pi_foundation/raspberry_pi_3_bplus\" target=\"_blank\" rel=\"noopener\">https://openwrt.org/toh/hwdata/raspberry_pi_foundation/raspberry_pi_3_bplus</a></p>\n<h4 id=\"3-编译\"><a href=\"#3-编译\" class=\"headerlink\" title=\"3. 编译\"></a>3. 编译</h4><p>编译过程非常消耗时间，时间主要消耗在下载各种源码包。</p>\n<p>这里提供几个可以手动下载到源码包的网址</p>\n<ol>\n<li><a href=\"http://sources.openwrt.org/\" target=\"_blank\" rel=\"noopener\">http://sources.openwrt.org/</a>   这个网址上比较齐全，基本都能找到对应的源码包。</li>\n<li><a href=\"http://openwrt.bjbook.net/download/\" target=\"_blank\" rel=\"noopener\">http://openwrt.bjbook.net/download/</a></li>\n<li><a href=\"https://gitee.com/ziguayungui/Openwrt_18.06_dl\" target=\"_blank\" rel=\"noopener\">https://gitee.com/ziguayungui/Openwrt_18.06_dl</a> 我将自己用到的源码包上传到了码云上面，国内下载的速度比github快很多。</li>\n</ol>\n"},{"title":"简单字符驱动程序及Makefile示例","date":"2019-08-28T15:37:28.000Z","_content":"\n    其实，主要是想在此记录一下makefile的编写。详细的原理分析及涉及到的知识点后面进行详细分析。\n\n### 1. Makefile\n\n```\n#KERN_DIR = /home/gqb/development/linux-kernel-2.6.37\n#KERN_DIR = /usr/src/$(shell uname -r)\nKERN_DIR = /lib/modules/$(shell uname -r)/build\n#KERN_DIR = /lib/modules/5.0.0-23-generic/build/\nall:\n\tmake -C $(KERN_DIR) M=$(shell pwd) modules\nclean:                                  \n\tmake -C $(KERN_DIR) M=$(shell pwd) modules clean\n\trm -rf modules.order\nobj-m += globalmem.o\n\n```\n\n### 2. C代码\n```\n#include <linux/module.h>\n#include <linux/fs.h>\n#include <linux/init.h>\n#include <linux/cdev.h>\n#include <linux/slab.h>\n#include <linux/uaccess.h>\n\n#define GLOBALMEM_SIZE 0x1000\n#define GLOBALMEM_MAJOR 230\n#define DEVICE_NUM 10\n#define GLOBALMEM_MAGIC 'g'\n#define MEM_CLEAR _IO(GLOBALMEM_MAGIC, 0)\n\nstatic int globalmem_major = GLOBALMEM_MAJOR;\nmodule_param(globalmem_major, int, S_IRUGO);\n\nstruct  globalmem_dev\n{\n    /* data */\n    struct cdev cdev;\n    unsigned char mem[GLOBALMEM_SIZE];\n};\n\nstruct globalmem_dev *globalmem_devp;\n\nstatic ssize_t globalmem_read(struct file *filp, char __user *buf, size_t size, loff_t *ppos)\n{\n    unsigned long p = *ppos;\n    unsigned int count = size;\n    int ret = 0;\n\n    struct globalmem_dev *dev = filp->private_data;\n\n    if(p >= GLOBALMEM_SIZE)\n        return 0;\n    if(count > GLOBALMEM_SIZE - p)\n        count = GLOBALMEM_SIZE - p;\n    \n    if(copy_to_user(buf, dev->mem + p, count))\n        ret = -EFAULT;\n    else\n    {\n        *ppos+=count;\n        ret = count;\n        printk(KERN_INFO \"read %u bytes from %lu\\n\",count, p);\n    }\n    return ret;\n}\n\nstatic ssize_t globalmem_write(struct file *filp, const char __user *buf, size_t size, loff_t *ppos)\n{\n    unsigned long p = *ppos;\n    unsigned int count = size;\n    int ret = 0;\n\n    struct globalmem_dev *dev = filp->private_data;\n\n    if(p >= GLOBALMEM_SIZE)\n        return 0;\n    if(count > GLOBALMEM_SIZE - p)\n        count = GLOBALMEM_SIZE - p;\n    \n    if(copy_from_user(dev->mem + p, buf, count))\n        ret = -EFAULT;\n    else\n    {\n        *ppos+=count;\n        ret = count;\n        printk(KERN_INFO \"written %u bytes from %lu\\n\",count, p);\n    }\n    return ret;\n}\n\nstatic loff_t globalmem_llseek(struct file *filp, loff_t offset, int orig)\n{\n    loff_t ret = 0;\n    switch(orig)\n    {\n        case 0:\n            if(offset < 0)\n            {\n                ret = -EINVAL;\n                break;\n            }\n            if((unsigned int)offset > GLOBALMEM_SIZE)\n            {\n                ret = -EINVAL;\n                break;\n            }\n            filp->f_pos = (unsigned int)offset;\n            ret = filp->f_pos;\n            break;\n        case 1:\n            if((filp->f_pos + offset) > GLOBALMEM_SIZE)\n            {\n                ret = -EINVAL;\n                break;\n            }\n            if((filp->f_pos + offset) < 0)\n            {\n                ret = -EINVAL;\n                break;\n            }\n            filp->f_pos += offset;\n            ret = filp->f_pos;\n            break;\n        default:\n            ret = -EINVAL;\n            break;\n    }\n    return ret;\n}\n\nstatic ssize_t globalmem_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)\n{\n    struct globalmem_dev *dev = filp->private_data;\n    switch(cmd)\n    {\n        case MEM_CLEAR:\n            memset(dev->mem, 0, GLOBALMEM_SIZE);\n            break;\n        default:\n            return -EINVAL;\n    }\n    return 0;\n}\n\nstatic int globalmem_open(struct inode *inode, struct file *filp)\n{\n    struct globalmem_dev *dev = container_of(inode->i_cdev, struct globalmem_dev, cdev);\n    filp->private_data = dev;\n    return 0;\n}\n\nstatic int globalmem_release(struct inode *inode, struct file *filp)\n{\n    return 0;\n}\n\nstatic const struct file_operations globalmem_fops = {\n    .owner  = THIS_MODULE,\n    .llseek = globalmem_llseek,\n    .read   = globalmem_read,\n    .write  = globalmem_write,\n    .unlocked_ioctl = globalmem_ioctl,\n    .open   = globalmem_open,\n    .release= globalmem_release,\n};\n\nstatic void globalmem_setup_cdev(struct globalmem_dev *dev, int index)\n{\n    int err, devno = MKDEV(globalmem_major, index);\n\n    cdev_init(&dev->cdev, &globalmem_fops);\n    dev->cdev.owner = THIS_MODULE;\n    err = cdev_add(&dev->cdev, devno, 1);\n    if(err)\n        printk(KERN_NOTICE \"Errir %d adding globalmem%d\",err,index);\n}\n\nstatic int __init globalmem_init(void)\n{\n    int ret;\n    dev_t devno = MKDEV(globalmem_major, 0);\n    int i;\n\n    if(globalmem_major)\n    {\n        ret = register_chrdev_region(devno, DEVICE_NUM, \"globalmem\");\n    }\n    else\n    {\n        ret = alloc_chrdev_region(&devno, 0, DEVICE_NUM, \"globalmem\");\n        globalmem_major = MAJOR(devno);\n    }\n    \n    if(ret < 0)\n        return ret;\n\n    globalmem_devp = kzalloc(sizeof(struct globalmem_dev) * DEVICE_NUM, GFP_KERNEL);\n    if(!globalmem_devp)\n    {\n        ret = -ENOMEM;\n        goto fail_malloc;\n    }\n    for(i = 0; i < DEVICE_NUM; i++)\n    {\n        globalmem_setup_cdev(globalmem_devp + i, i);\n    }\n    return 0;\n\nfail_malloc:\n    unregister_chrdev_region(devno, DEVICE_NUM);\n    return ret;\n}\n\nstatic void __exit globalmem_exit(void)\n{\n    int i;\n    for(i = 0; i < DEVICE_NUM; i++)\n    {\n        cdev_del(&(globalmem_devp + i)->cdev);\n    }\n    kfree(globalmem_devp);\n    unregister_chrdev_region(MKDEV(globalmem_major, 0), DEVICE_NUM);\n}\n\nmodule_init(globalmem_init);\nmodule_exit(globalmem_exit);\n\nMODULE_AUTHOR(\"ziguayungui\");\nMODULE_LICENSE(\"GPL v2\");\n\n```\n### 3. 编译及测试\n#### 3.1 编译\n    编译：当前目录下执行 make 命令，成功后生成***.ko 文件。\n    清除编译结果： 当前目录下执行 make clean命令。\n#### 3.2 安装及卸载\n    安装： sudo insmod ***.ko\n    卸载： sudo rmmod ***\n#### 3.3 测试\n    创建设备节点：\n        mknod /dev/*** c 230 0\n    读取数据：\n        cat /proc/***\n    写入数据：\n        echo \"hello world\" > /dev/***\n    \n","source":"_posts/简单字符驱动程序示例.md","raw":"---\ntitle: 简单字符驱动程序及Makefile示例\ndate: 2019-08-28 23:37:28\ncategories: \n- 驱动开发\ntags:\n- Hexo\n---\n\n    其实，主要是想在此记录一下makefile的编写。详细的原理分析及涉及到的知识点后面进行详细分析。\n\n### 1. Makefile\n\n```\n#KERN_DIR = /home/gqb/development/linux-kernel-2.6.37\n#KERN_DIR = /usr/src/$(shell uname -r)\nKERN_DIR = /lib/modules/$(shell uname -r)/build\n#KERN_DIR = /lib/modules/5.0.0-23-generic/build/\nall:\n\tmake -C $(KERN_DIR) M=$(shell pwd) modules\nclean:                                  \n\tmake -C $(KERN_DIR) M=$(shell pwd) modules clean\n\trm -rf modules.order\nobj-m += globalmem.o\n\n```\n\n### 2. C代码\n```\n#include <linux/module.h>\n#include <linux/fs.h>\n#include <linux/init.h>\n#include <linux/cdev.h>\n#include <linux/slab.h>\n#include <linux/uaccess.h>\n\n#define GLOBALMEM_SIZE 0x1000\n#define GLOBALMEM_MAJOR 230\n#define DEVICE_NUM 10\n#define GLOBALMEM_MAGIC 'g'\n#define MEM_CLEAR _IO(GLOBALMEM_MAGIC, 0)\n\nstatic int globalmem_major = GLOBALMEM_MAJOR;\nmodule_param(globalmem_major, int, S_IRUGO);\n\nstruct  globalmem_dev\n{\n    /* data */\n    struct cdev cdev;\n    unsigned char mem[GLOBALMEM_SIZE];\n};\n\nstruct globalmem_dev *globalmem_devp;\n\nstatic ssize_t globalmem_read(struct file *filp, char __user *buf, size_t size, loff_t *ppos)\n{\n    unsigned long p = *ppos;\n    unsigned int count = size;\n    int ret = 0;\n\n    struct globalmem_dev *dev = filp->private_data;\n\n    if(p >= GLOBALMEM_SIZE)\n        return 0;\n    if(count > GLOBALMEM_SIZE - p)\n        count = GLOBALMEM_SIZE - p;\n    \n    if(copy_to_user(buf, dev->mem + p, count))\n        ret = -EFAULT;\n    else\n    {\n        *ppos+=count;\n        ret = count;\n        printk(KERN_INFO \"read %u bytes from %lu\\n\",count, p);\n    }\n    return ret;\n}\n\nstatic ssize_t globalmem_write(struct file *filp, const char __user *buf, size_t size, loff_t *ppos)\n{\n    unsigned long p = *ppos;\n    unsigned int count = size;\n    int ret = 0;\n\n    struct globalmem_dev *dev = filp->private_data;\n\n    if(p >= GLOBALMEM_SIZE)\n        return 0;\n    if(count > GLOBALMEM_SIZE - p)\n        count = GLOBALMEM_SIZE - p;\n    \n    if(copy_from_user(dev->mem + p, buf, count))\n        ret = -EFAULT;\n    else\n    {\n        *ppos+=count;\n        ret = count;\n        printk(KERN_INFO \"written %u bytes from %lu\\n\",count, p);\n    }\n    return ret;\n}\n\nstatic loff_t globalmem_llseek(struct file *filp, loff_t offset, int orig)\n{\n    loff_t ret = 0;\n    switch(orig)\n    {\n        case 0:\n            if(offset < 0)\n            {\n                ret = -EINVAL;\n                break;\n            }\n            if((unsigned int)offset > GLOBALMEM_SIZE)\n            {\n                ret = -EINVAL;\n                break;\n            }\n            filp->f_pos = (unsigned int)offset;\n            ret = filp->f_pos;\n            break;\n        case 1:\n            if((filp->f_pos + offset) > GLOBALMEM_SIZE)\n            {\n                ret = -EINVAL;\n                break;\n            }\n            if((filp->f_pos + offset) < 0)\n            {\n                ret = -EINVAL;\n                break;\n            }\n            filp->f_pos += offset;\n            ret = filp->f_pos;\n            break;\n        default:\n            ret = -EINVAL;\n            break;\n    }\n    return ret;\n}\n\nstatic ssize_t globalmem_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)\n{\n    struct globalmem_dev *dev = filp->private_data;\n    switch(cmd)\n    {\n        case MEM_CLEAR:\n            memset(dev->mem, 0, GLOBALMEM_SIZE);\n            break;\n        default:\n            return -EINVAL;\n    }\n    return 0;\n}\n\nstatic int globalmem_open(struct inode *inode, struct file *filp)\n{\n    struct globalmem_dev *dev = container_of(inode->i_cdev, struct globalmem_dev, cdev);\n    filp->private_data = dev;\n    return 0;\n}\n\nstatic int globalmem_release(struct inode *inode, struct file *filp)\n{\n    return 0;\n}\n\nstatic const struct file_operations globalmem_fops = {\n    .owner  = THIS_MODULE,\n    .llseek = globalmem_llseek,\n    .read   = globalmem_read,\n    .write  = globalmem_write,\n    .unlocked_ioctl = globalmem_ioctl,\n    .open   = globalmem_open,\n    .release= globalmem_release,\n};\n\nstatic void globalmem_setup_cdev(struct globalmem_dev *dev, int index)\n{\n    int err, devno = MKDEV(globalmem_major, index);\n\n    cdev_init(&dev->cdev, &globalmem_fops);\n    dev->cdev.owner = THIS_MODULE;\n    err = cdev_add(&dev->cdev, devno, 1);\n    if(err)\n        printk(KERN_NOTICE \"Errir %d adding globalmem%d\",err,index);\n}\n\nstatic int __init globalmem_init(void)\n{\n    int ret;\n    dev_t devno = MKDEV(globalmem_major, 0);\n    int i;\n\n    if(globalmem_major)\n    {\n        ret = register_chrdev_region(devno, DEVICE_NUM, \"globalmem\");\n    }\n    else\n    {\n        ret = alloc_chrdev_region(&devno, 0, DEVICE_NUM, \"globalmem\");\n        globalmem_major = MAJOR(devno);\n    }\n    \n    if(ret < 0)\n        return ret;\n\n    globalmem_devp = kzalloc(sizeof(struct globalmem_dev) * DEVICE_NUM, GFP_KERNEL);\n    if(!globalmem_devp)\n    {\n        ret = -ENOMEM;\n        goto fail_malloc;\n    }\n    for(i = 0; i < DEVICE_NUM; i++)\n    {\n        globalmem_setup_cdev(globalmem_devp + i, i);\n    }\n    return 0;\n\nfail_malloc:\n    unregister_chrdev_region(devno, DEVICE_NUM);\n    return ret;\n}\n\nstatic void __exit globalmem_exit(void)\n{\n    int i;\n    for(i = 0; i < DEVICE_NUM; i++)\n    {\n        cdev_del(&(globalmem_devp + i)->cdev);\n    }\n    kfree(globalmem_devp);\n    unregister_chrdev_region(MKDEV(globalmem_major, 0), DEVICE_NUM);\n}\n\nmodule_init(globalmem_init);\nmodule_exit(globalmem_exit);\n\nMODULE_AUTHOR(\"ziguayungui\");\nMODULE_LICENSE(\"GPL v2\");\n\n```\n### 3. 编译及测试\n#### 3.1 编译\n    编译：当前目录下执行 make 命令，成功后生成***.ko 文件。\n    清除编译结果： 当前目录下执行 make clean命令。\n#### 3.2 安装及卸载\n    安装： sudo insmod ***.ko\n    卸载： sudo rmmod ***\n#### 3.3 测试\n    创建设备节点：\n        mknod /dev/*** c 230 0\n    读取数据：\n        cat /proc/***\n    写入数据：\n        echo \"hello world\" > /dev/***\n    \n","slug":"简单字符驱动程序示例","published":1,"updated":"2019-10-20T06:24:17.269Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1ylzghf0006umie3lhauk6o","content":"<pre><code>其实，主要是想在此记录一下makefile的编写。详细的原理分析及涉及到的知识点后面进行详细分析。</code></pre><h3 id=\"1-Makefile\"><a href=\"#1-Makefile\" class=\"headerlink\" title=\"1. Makefile\"></a>1. Makefile</h3><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#KERN_DIR = /home/gqb/development/linux-kernel-2.6.37</span></span><br><span class=\"line\"><span class=\"comment\">#KERN_DIR = /usr/src/$(shell uname -r)</span></span><br><span class=\"line\">KERN_DIR = /lib/modules/<span class=\"variable\">$(<span class=\"built_in\">shell</span> uname -r)</span>/build</span><br><span class=\"line\"><span class=\"comment\">#KERN_DIR = /lib/modules/5.0.0-23-generic/build/</span></span><br><span class=\"line\"><span class=\"section\">all:</span></span><br><span class=\"line\">\tmake -C <span class=\"variable\">$(KERN_DIR)</span> M=<span class=\"variable\">$(<span class=\"built_in\">shell</span> pwd)</span> modules</span><br><span class=\"line\"><span class=\"section\">clean:                                  </span></span><br><span class=\"line\">\tmake -C <span class=\"variable\">$(KERN_DIR)</span> M=<span class=\"variable\">$(<span class=\"built_in\">shell</span> pwd)</span> modules clean</span><br><span class=\"line\">\trm -rf modules.order</span><br><span class=\"line\">obj-m += globalmem.o</span><br></pre></td></tr></table></figure><a id=\"more\"></a>\n\n<h3 id=\"2-C代码\"><a href=\"#2-C代码\" class=\"headerlink\" title=\"2. C代码\"></a>2. C代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/module.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/fs.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/init.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/cdev.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/slab.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/uaccess.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> GLOBALMEM_SIZE 0x1000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> GLOBALMEM_MAJOR 230</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DEVICE_NUM 10</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> GLOBALMEM_MAGIC <span class=\"meta-string\">'g'</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MEM_CLEAR _IO(GLOBALMEM_MAGIC, 0)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> globalmem_major = GLOBALMEM_MAJOR;</span><br><span class=\"line\">module_param(globalmem_major, <span class=\"keyword\">int</span>, S_IRUGO);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span>  <span class=\"title\">globalmem_dev</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">/* data */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cdev</span> <span class=\"title\">cdev</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> mem[GLOBALMEM_SIZE];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">globalmem_dev</span> *<span class=\"title\">globalmem_devp</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> ssize_t <span class=\"title\">globalmem_read</span><span class=\"params\">(struct file *filp, <span class=\"keyword\">char</span> __user *buf, <span class=\"keyword\">size_t</span> size, <span class=\"keyword\">loff_t</span> *ppos)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> p = *ppos;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> count = size;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">globalmem_dev</span> *<span class=\"title\">dev</span> = <span class=\"title\">filp</span>-&gt;<span class=\"title\">private_data</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p &gt;= GLOBALMEM_SIZE)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(count &gt; GLOBALMEM_SIZE - p)</span><br><span class=\"line\">        count = GLOBALMEM_SIZE - p;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(copy_to_user(buf, dev-&gt;mem + p, count))</span><br><span class=\"line\">        ret = -EFAULT;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        *ppos+=count;</span><br><span class=\"line\">        ret = count;</span><br><span class=\"line\">        printk(KERN_INFO <span class=\"string\">\"read %u bytes from %lu\\n\"</span>,count, p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> ssize_t <span class=\"title\">globalmem_write</span><span class=\"params\">(struct file *filp, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> __user *buf, <span class=\"keyword\">size_t</span> size, <span class=\"keyword\">loff_t</span> *ppos)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> p = *ppos;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> count = size;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">globalmem_dev</span> *<span class=\"title\">dev</span> = <span class=\"title\">filp</span>-&gt;<span class=\"title\">private_data</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p &gt;= GLOBALMEM_SIZE)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(count &gt; GLOBALMEM_SIZE - p)</span><br><span class=\"line\">        count = GLOBALMEM_SIZE - p;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(copy_from_user(dev-&gt;mem + p, buf, count))</span><br><span class=\"line\">        ret = -EFAULT;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        *ppos+=count;</span><br><span class=\"line\">        ret = count;</span><br><span class=\"line\">        printk(KERN_INFO <span class=\"string\">\"written %u bytes from %lu\\n\"</span>,count, p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> loff_t <span class=\"title\">globalmem_llseek</span><span class=\"params\">(struct file *filp, <span class=\"keyword\">loff_t</span> offset, <span class=\"keyword\">int</span> orig)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">loff_t</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(orig)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(offset &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ret = -EINVAL;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)offset &gt; GLOBALMEM_SIZE)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ret = -EINVAL;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            filp-&gt;f_pos = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)offset;</span><br><span class=\"line\">            ret = filp-&gt;f_pos;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((filp-&gt;f_pos + offset) &gt; GLOBALMEM_SIZE)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ret = -EINVAL;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((filp-&gt;f_pos + offset) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ret = -EINVAL;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            filp-&gt;f_pos += offset;</span><br><span class=\"line\">            ret = filp-&gt;f_pos;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            ret = -EINVAL;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> ssize_t <span class=\"title\">globalmem_ioctl</span><span class=\"params\">(struct file *filp, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> cmd, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> arg)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">globalmem_dev</span> *<span class=\"title\">dev</span> = <span class=\"title\">filp</span>-&gt;<span class=\"title\">private_data</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(cmd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> MEM_CLEAR:</span><br><span class=\"line\">            <span class=\"built_in\">memset</span>(dev-&gt;mem, <span class=\"number\">0</span>, GLOBALMEM_SIZE);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -EINVAL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">globalmem_open</span><span class=\"params\">(struct inode *inode, struct file *filp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">globalmem_dev</span> *<span class=\"title\">dev</span> = <span class=\"title\">container_of</span>(<span class=\"title\">inode</span>-&gt;<span class=\"title\">i_cdev</span>, <span class=\"title\">struct</span> <span class=\"title\">globalmem_dev</span>, <span class=\"title\">cdev</span>);</span></span><br><span class=\"line\">    filp-&gt;private_data = dev;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">globalmem_release</span><span class=\"params\">(struct inode *inode, struct file *filp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">file_operations</span> <span class=\"title\">globalmem_fops</span> = &#123;</span></span><br><span class=\"line\">    .owner  = THIS_MODULE,</span><br><span class=\"line\">    .llseek = globalmem_llseek,</span><br><span class=\"line\">    .read   = globalmem_read,</span><br><span class=\"line\">    .write  = globalmem_write,</span><br><span class=\"line\">    .unlocked_ioctl = globalmem_ioctl,</span><br><span class=\"line\">    .open   = globalmem_open,</span><br><span class=\"line\">    .release= globalmem_release,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">globalmem_setup_cdev</span><span class=\"params\">(struct globalmem_dev *dev, <span class=\"keyword\">int</span> index)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> err, devno = MKDEV(globalmem_major, index);</span><br><span class=\"line\"></span><br><span class=\"line\">    cdev_init(&amp;dev-&gt;cdev, &amp;globalmem_fops);</span><br><span class=\"line\">    dev-&gt;cdev.owner = THIS_MODULE;</span><br><span class=\"line\">    err = cdev_add(&amp;dev-&gt;cdev, devno, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)</span><br><span class=\"line\">        printk(KERN_NOTICE <span class=\"string\">\"Errir %d adding globalmem%d\"</span>,err,index);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> __<span class=\"function\">init <span class=\"title\">globalmem_init</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret;</span><br><span class=\"line\">    <span class=\"keyword\">dev_t</span> devno = MKDEV(globalmem_major, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(globalmem_major)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ret = register_chrdev_region(devno, DEVICE_NUM, <span class=\"string\">\"globalmem\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ret = alloc_chrdev_region(&amp;devno, <span class=\"number\">0</span>, DEVICE_NUM, <span class=\"string\">\"globalmem\"</span>);</span><br><span class=\"line\">        globalmem_major = MAJOR(devno);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ret &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\"></span><br><span class=\"line\">    globalmem_devp = kzalloc(<span class=\"keyword\">sizeof</span>(struct globalmem_dev) * DEVICE_NUM, GFP_KERNEL);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!globalmem_devp)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ret = -ENOMEM;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> fail_malloc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; DEVICE_NUM; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        globalmem_setup_cdev(globalmem_devp + i, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">fail_malloc:</span><br><span class=\"line\">    unregister_chrdev_region(devno, DEVICE_NUM);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __<span class=\"function\"><span class=\"built_in\">exit</span> <span class=\"title\">globalmem_exit</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; DEVICE_NUM; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cdev_del(&amp;(globalmem_devp + i)-&gt;cdev);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    kfree(globalmem_devp);</span><br><span class=\"line\">    unregister_chrdev_region(MKDEV(globalmem_major, <span class=\"number\">0</span>), DEVICE_NUM);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module_init(globalmem_init);</span><br><span class=\"line\">module_exit(globalmem_exit);</span><br><span class=\"line\"></span><br><span class=\"line\">MODULE_AUTHOR(<span class=\"string\">\"ziguayungui\"</span>);</span><br><span class=\"line\">MODULE_LICENSE(<span class=\"string\">\"GPL v2\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-编译及测试\"><a href=\"#3-编译及测试\" class=\"headerlink\" title=\"3. 编译及测试\"></a>3. 编译及测试</h3><h4 id=\"3-1-编译\"><a href=\"#3-1-编译\" class=\"headerlink\" title=\"3.1 编译\"></a>3.1 编译</h4><pre><code>编译：当前目录下执行 make 命令，成功后生成***.ko 文件。\n清除编译结果： 当前目录下执行 make clean命令。</code></pre><h4 id=\"3-2-安装及卸载\"><a href=\"#3-2-安装及卸载\" class=\"headerlink\" title=\"3.2 安装及卸载\"></a>3.2 安装及卸载</h4><pre><code>安装： sudo insmod ***.ko\n卸载： sudo rmmod ***</code></pre><h4 id=\"3-3-测试\"><a href=\"#3-3-测试\" class=\"headerlink\" title=\"3.3 测试\"></a>3.3 测试</h4><pre><code>创建设备节点：\n    mknod /dev/*** c 230 0\n读取数据：\n    cat /proc/***\n写入数据：\n    echo &quot;hello world&quot; &gt; /dev/***</code></pre>","site":{"data":{}},"length":6331,"excerpt":"<pre><code>其实，主要是想在此记录一下makefile的编写。详细的原理分析及涉及到的知识点后面进行详细分析。</code></pre><h3 id=\"1-Makefile\"><a href=\"#1-Makefile\" class=\"headerlink\" title=\"1. Makefile\"></a>1. Makefile</h3><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#KERN_DIR = /home/gqb/development/linux-kernel-2.6.37</span></span><br><span class=\"line\"><span class=\"comment\">#KERN_DIR = /usr/src/$(shell uname -r)</span></span><br><span class=\"line\">KERN_DIR = /lib/modules/<span class=\"variable\">$(<span class=\"built_in\">shell</span> uname -r)</span>/build</span><br><span class=\"line\"><span class=\"comment\">#KERN_DIR = /lib/modules/5.0.0-23-generic/build/</span></span><br><span class=\"line\"><span class=\"section\">all:</span></span><br><span class=\"line\">\tmake -C <span class=\"variable\">$(KERN_DIR)</span> M=<span class=\"variable\">$(<span class=\"built_in\">shell</span> pwd)</span> modules</span><br><span class=\"line\"><span class=\"section\">clean:                                  </span></span><br><span class=\"line\">\tmake -C <span class=\"variable\">$(KERN_DIR)</span> M=<span class=\"variable\">$(<span class=\"built_in\">shell</span> pwd)</span> modules clean</span><br><span class=\"line\">\trm -rf modules.order</span><br><span class=\"line\">obj-m += globalmem.o</span><br></pre></td></tr></table></figure>","more":"\n\n<h3 id=\"2-C代码\"><a href=\"#2-C代码\" class=\"headerlink\" title=\"2. C代码\"></a>2. C代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/module.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/fs.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/init.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/cdev.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/slab.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/uaccess.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> GLOBALMEM_SIZE 0x1000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> GLOBALMEM_MAJOR 230</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DEVICE_NUM 10</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> GLOBALMEM_MAGIC <span class=\"meta-string\">'g'</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MEM_CLEAR _IO(GLOBALMEM_MAGIC, 0)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> globalmem_major = GLOBALMEM_MAJOR;</span><br><span class=\"line\">module_param(globalmem_major, <span class=\"keyword\">int</span>, S_IRUGO);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span>  <span class=\"title\">globalmem_dev</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">/* data */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cdev</span> <span class=\"title\">cdev</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> mem[GLOBALMEM_SIZE];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">globalmem_dev</span> *<span class=\"title\">globalmem_devp</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> ssize_t <span class=\"title\">globalmem_read</span><span class=\"params\">(struct file *filp, <span class=\"keyword\">char</span> __user *buf, <span class=\"keyword\">size_t</span> size, <span class=\"keyword\">loff_t</span> *ppos)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> p = *ppos;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> count = size;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">globalmem_dev</span> *<span class=\"title\">dev</span> = <span class=\"title\">filp</span>-&gt;<span class=\"title\">private_data</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p &gt;= GLOBALMEM_SIZE)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(count &gt; GLOBALMEM_SIZE - p)</span><br><span class=\"line\">        count = GLOBALMEM_SIZE - p;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(copy_to_user(buf, dev-&gt;mem + p, count))</span><br><span class=\"line\">        ret = -EFAULT;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        *ppos+=count;</span><br><span class=\"line\">        ret = count;</span><br><span class=\"line\">        printk(KERN_INFO <span class=\"string\">\"read %u bytes from %lu\\n\"</span>,count, p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> ssize_t <span class=\"title\">globalmem_write</span><span class=\"params\">(struct file *filp, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> __user *buf, <span class=\"keyword\">size_t</span> size, <span class=\"keyword\">loff_t</span> *ppos)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> p = *ppos;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> count = size;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">globalmem_dev</span> *<span class=\"title\">dev</span> = <span class=\"title\">filp</span>-&gt;<span class=\"title\">private_data</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p &gt;= GLOBALMEM_SIZE)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(count &gt; GLOBALMEM_SIZE - p)</span><br><span class=\"line\">        count = GLOBALMEM_SIZE - p;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(copy_from_user(dev-&gt;mem + p, buf, count))</span><br><span class=\"line\">        ret = -EFAULT;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        *ppos+=count;</span><br><span class=\"line\">        ret = count;</span><br><span class=\"line\">        printk(KERN_INFO <span class=\"string\">\"written %u bytes from %lu\\n\"</span>,count, p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> loff_t <span class=\"title\">globalmem_llseek</span><span class=\"params\">(struct file *filp, <span class=\"keyword\">loff_t</span> offset, <span class=\"keyword\">int</span> orig)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">loff_t</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(orig)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(offset &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ret = -EINVAL;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)offset &gt; GLOBALMEM_SIZE)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ret = -EINVAL;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            filp-&gt;f_pos = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)offset;</span><br><span class=\"line\">            ret = filp-&gt;f_pos;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((filp-&gt;f_pos + offset) &gt; GLOBALMEM_SIZE)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ret = -EINVAL;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((filp-&gt;f_pos + offset) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ret = -EINVAL;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            filp-&gt;f_pos += offset;</span><br><span class=\"line\">            ret = filp-&gt;f_pos;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            ret = -EINVAL;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> ssize_t <span class=\"title\">globalmem_ioctl</span><span class=\"params\">(struct file *filp, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> cmd, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> arg)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">globalmem_dev</span> *<span class=\"title\">dev</span> = <span class=\"title\">filp</span>-&gt;<span class=\"title\">private_data</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(cmd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> MEM_CLEAR:</span><br><span class=\"line\">            <span class=\"built_in\">memset</span>(dev-&gt;mem, <span class=\"number\">0</span>, GLOBALMEM_SIZE);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -EINVAL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">globalmem_open</span><span class=\"params\">(struct inode *inode, struct file *filp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">globalmem_dev</span> *<span class=\"title\">dev</span> = <span class=\"title\">container_of</span>(<span class=\"title\">inode</span>-&gt;<span class=\"title\">i_cdev</span>, <span class=\"title\">struct</span> <span class=\"title\">globalmem_dev</span>, <span class=\"title\">cdev</span>);</span></span><br><span class=\"line\">    filp-&gt;private_data = dev;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">globalmem_release</span><span class=\"params\">(struct inode *inode, struct file *filp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">file_operations</span> <span class=\"title\">globalmem_fops</span> = &#123;</span></span><br><span class=\"line\">    .owner  = THIS_MODULE,</span><br><span class=\"line\">    .llseek = globalmem_llseek,</span><br><span class=\"line\">    .read   = globalmem_read,</span><br><span class=\"line\">    .write  = globalmem_write,</span><br><span class=\"line\">    .unlocked_ioctl = globalmem_ioctl,</span><br><span class=\"line\">    .open   = globalmem_open,</span><br><span class=\"line\">    .release= globalmem_release,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">globalmem_setup_cdev</span><span class=\"params\">(struct globalmem_dev *dev, <span class=\"keyword\">int</span> index)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> err, devno = MKDEV(globalmem_major, index);</span><br><span class=\"line\"></span><br><span class=\"line\">    cdev_init(&amp;dev-&gt;cdev, &amp;globalmem_fops);</span><br><span class=\"line\">    dev-&gt;cdev.owner = THIS_MODULE;</span><br><span class=\"line\">    err = cdev_add(&amp;dev-&gt;cdev, devno, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)</span><br><span class=\"line\">        printk(KERN_NOTICE <span class=\"string\">\"Errir %d adding globalmem%d\"</span>,err,index);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> __<span class=\"function\">init <span class=\"title\">globalmem_init</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret;</span><br><span class=\"line\">    <span class=\"keyword\">dev_t</span> devno = MKDEV(globalmem_major, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(globalmem_major)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ret = register_chrdev_region(devno, DEVICE_NUM, <span class=\"string\">\"globalmem\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ret = alloc_chrdev_region(&amp;devno, <span class=\"number\">0</span>, DEVICE_NUM, <span class=\"string\">\"globalmem\"</span>);</span><br><span class=\"line\">        globalmem_major = MAJOR(devno);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ret &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\"></span><br><span class=\"line\">    globalmem_devp = kzalloc(<span class=\"keyword\">sizeof</span>(struct globalmem_dev) * DEVICE_NUM, GFP_KERNEL);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!globalmem_devp)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ret = -ENOMEM;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> fail_malloc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; DEVICE_NUM; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        globalmem_setup_cdev(globalmem_devp + i, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">fail_malloc:</span><br><span class=\"line\">    unregister_chrdev_region(devno, DEVICE_NUM);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __<span class=\"function\"><span class=\"built_in\">exit</span> <span class=\"title\">globalmem_exit</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; DEVICE_NUM; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cdev_del(&amp;(globalmem_devp + i)-&gt;cdev);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    kfree(globalmem_devp);</span><br><span class=\"line\">    unregister_chrdev_region(MKDEV(globalmem_major, <span class=\"number\">0</span>), DEVICE_NUM);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module_init(globalmem_init);</span><br><span class=\"line\">module_exit(globalmem_exit);</span><br><span class=\"line\"></span><br><span class=\"line\">MODULE_AUTHOR(<span class=\"string\">\"ziguayungui\"</span>);</span><br><span class=\"line\">MODULE_LICENSE(<span class=\"string\">\"GPL v2\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-编译及测试\"><a href=\"#3-编译及测试\" class=\"headerlink\" title=\"3. 编译及测试\"></a>3. 编译及测试</h3><h4 id=\"3-1-编译\"><a href=\"#3-1-编译\" class=\"headerlink\" title=\"3.1 编译\"></a>3.1 编译</h4><pre><code>编译：当前目录下执行 make 命令，成功后生成***.ko 文件。\n清除编译结果： 当前目录下执行 make clean命令。</code></pre><h4 id=\"3-2-安装及卸载\"><a href=\"#3-2-安装及卸载\" class=\"headerlink\" title=\"3.2 安装及卸载\"></a>3.2 安装及卸载</h4><pre><code>安装： sudo insmod ***.ko\n卸载： sudo rmmod ***</code></pre><h4 id=\"3-3-测试\"><a href=\"#3-3-测试\" class=\"headerlink\" title=\"3.3 测试\"></a>3.3 测试</h4><pre><code>创建设备节点：\n    mknod /dev/*** c 230 0\n读取数据：\n    cat /proc/***\n写入数据：\n    echo &quot;hello world&quot; &gt; /dev/***</code></pre>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck1ylzggy0000umie8gf1plen","category_id":"ck1ylzghc0004umiebzt6dmym","_id":"ck1ylzghj000aumie0go0hv4u"},{"post_id":"ck1ylzgh70002umie2skbrv6g","category_id":"ck1ylzghi0007umie6x1u3zcz","_id":"ck1ylzghn000eumie4bj739p8"},{"post_id":"ck1ylzghf0006umie3lhauk6o","category_id":"ck1ylzghi0007umie6x1u3zcz","_id":"ck1ylzgho000gumiep3x08mgj"}],"PostTag":[{"post_id":"ck1ylzggy0000umie8gf1plen","tag_id":"ck1ylzghe0005umie5bthws72","_id":"ck1ylzghj0009umiev59elr4f"},{"post_id":"ck1ylzgh70002umie2skbrv6g","tag_id":"ck1ylzghi0008umiere127a25","_id":"ck1ylzghm000dumieiiyrh1xx"},{"post_id":"ck1ylzghf0006umie3lhauk6o","tag_id":"ck1ylzghe0005umie5bthws72","_id":"ck1ylzghn000fumietodvdgyr"}],"Tag":[{"name":"Hexo","_id":"ck1ylzghe0005umie5bthws72"},{"name":"Openwrt","_id":"ck1ylzghi0008umiere127a25"}]}}